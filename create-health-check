# JSON content as a string
$jsonContent = @"
{
    "name": "[product][env] API Healthcheck Test - https://application-env.domain.com/health/ready",
    "status": "live",
    "type": "api",
    "tags": [
        "env:env",
        "product:product",
        "type:synthetics",
        "provider:healthcheck_test",
        "resource:API",
        "team:cloud"
    ],
    "config": {
        "assertions": [
            {
                "operator": "lessThan",
                "type": "responseTime",
                "target": 50000
            },
            {
                "operator": "is",
                "type": "statusCode",
                "target": 503
            },
            {
                "operator": "is",
                "property": "content-type",
                "type": "header",
                "target": "application/json; charset=utf-8"
            },
            {
                "type": "body",
                "operator": "validatesJSONPath",
                "target": {
                    "jsonPath": "$.DependencyHealthChecks.azureblob.Status",
                    "operator": "contains",
                    "targetValue": "Healthy"
                }
            },
            {
                "type": "body",
                "operator": "validatesJSONPath",
                "target": {
                    "jsonPath": "$.DependencyHealthChecks.AzureFunction.Status",
                    "operator": "contains",
                    "targetValue": "Healthy"
                }
            },
            {
                "type": "body",
                "operator": "validatesJSONPath",
                "target": {
                    "jsonPath": "$.DependencyHealthChecks.EPSPAzureFunction.Status",
                    "operator": "contains",
                    "targetValue": "Healthy"
                }
            },
            {
                "type": "body",
                "operator": "validatesJSONPath",
                "target": {
                    "jsonPath": "$.DependencyHealthChecks.EventHub.Status",
                    "operator": "contains",
                    "targetValue": "Healthy"
                }
            },
            {
                "type": "body",
                "operator": "validatesJSONPath",
                "target": {
                    "jsonPath": "$.DependencyHealthChecks.ServiceBus.Status",
                    "operator": "contains",
                    "targetValue": "Unhealthy"
                }
            },
            {
                "type": "body",
                "operator": "validatesJSONPath",
                "target": {
                    "jsonPath": "$.DependencyHealthChecks.SQLServer.Status",
                    "operator": "contains",
                    "targetValue": "Healthy"
                }
            },
            {
                "type": "body",
                "operator": "validatesJSONPath",
                "target": {
                    "jsonPath": "$.OverallStatus",
                    "operator": "contains",
                    "targetValue": "Unhealthy"
                }
            }
        ],
        "request": {
            "method": "GET",
            "url": "https://application-env.domain.com/health/ready"
        }
    },
    "message": "ALERT: Pagerduty [product] in [env] true",
    "options": {
        "httpVersion": "http1",
        "min_failure_duration": 300,
        "min_location_failed": 1,
        "monitor_name": "[product][env] API Healthcheck Test - https://application-env.domain.com/health/ready",
        "monitor_options": {
            "renotify_interval": 0,
            "on_missing_data": "show_no_data",
            "notify_audit": false,
            "new_host_delay": 300,
            "include_tags": true
        },
        "monitor_priority": 2,
        "retry": {
            "count": 2,
            "interval": 500
        },
        "tick_every": 86400
    },
    "locations": [
        "pl:ww44455vdddf"
    ],
    "subtype": "http"
}
"@

# Convert JSON string to a PowerShell object
$jsonObj = ConvertFrom-Json -InputObject $jsonContent

# Set API key and APP key
$apiKey = $env:DD_API_KEY
$appKey = $env:DD_APP_KEY

# Set test parameters
$testName = "Catalog Synthetic Test"
$testType = "api"
$testConfig = @{
    "request" = @{
        "method" = "GET"
        "url" = "https://your-api-url.com/healthcheck" # Replace with your actual API URL
    }
    "assertions" = @()
}

# Add assertions for overall status and dependency health checks
$testConfig.assertions += @{
    "operator" = "isEqualTo"
    "type" = "body"
    "target" = "OverallStatus"
    "property" = "value"
    "expectedValue" = "Healthy"
}

foreach ($dependency in $jsonObj.DependencyHealthChecks.PSObject.Properties) {
    $dependencyName = $dependency.Name
    $testConfig.assertions += @{
        "operator" = "isEqualTo"
        "type" = "body"
        "target" = "DependencyHealthChecks.$dependencyName.Status"
        "property" = "value"
        "expectedValue" = "Healthy"
    }
}

# Convert the test config to JSON
$testConfigJson = $testConfig | ConvertTo-Json

# Prepare the API URL
$apiUrl = "https://api.datadoghq.com/api/v1/synthetics/tests"

# Prepare the headers
$headers = @{
    "Content-Type" = "application/json"
    "DD-API-KEY" = $apiKey
    "DD-APPLICATION-KEY" = $appKey
}

# Call the Datadog REST API to create the synthetic test
$response = Invoke-WebRequest -Uri $apiUrl -Method 'POST' -Headers $headers -Body $testConfigJson

# Output the result
$response.Content
