# JSON content as a string
$jsonContent = @"
{
  "OverallStatus": "Healthy",
  "TotalCheckDuration": "0:0.07",
  "DependencyHealthChecks": {
    "SQLServer": {
      "Status": "Healthy",
      "Duration": "0:0.00"
    },
    "App": {
      "Status": "Healthy",
      "Duration": "0:0.05"
    },
    "AzureFunction": {
      "Status": "Healthy",
      "Duration": "0:0.07"
    },
    "azureblob": {
      "Status": "Healthy",
      "Duration": "0:0.01"
    },
    "azureeventhub": {
      "Status": "Healthy",
      "Duration": "0:0.00"
    }
  }
}
"@

# Convert JSON string to a PowerShell object
$jsonObj = ConvertFrom-Json -InputObject $jsonContent

# Set API key and APP key
$apiKey = $env:DD_API_KEY
$appKey = $env:DD_APP_KEY

# Set test parameters
$product = "product"
$env = "env"
$testName = "[$product][$env] API Healthcheck Test - https://application-$env.domain.com/health/ready"
$testType = "api"
$tags = @("env:$env", "product:$product", "type:synthetics", "provider:healthcheck_test", "resource:API", "team:cloud")
$locations = @("pl:ww44455vdddf")
$monitorPriority = 2
$alertMessage = "ALERT: Pagerduty [$product] in [$env] true"

$testConfig = @{
    "name" = $testName
    "status" = "live"
    "type" = $testType
    "tags" = $tags
    "config" = @{
        "request" = @{
            "method" = "GET"
            "url" = "https://application-$env.domain.com/health/ready"
        }
        "assertions" = @()
    }
    "message" = $alertMessage
    "options" = @{
        "httpVersion" = "http1"
        "min_failure_duration" = 300
        "min_location_failed" = 1
        "monitor_name" = $testName
        "monitor_options" = @{
            "renotify_interval" = 0
            "on_missing_data" = "show_no_data"
            "notify_audit" = $false
            "new_host_delay" = 300
            "include_tags" = $true
        }
        "monitor_priority" = $monitorPriority
        "retry" = @{
            "count" = 2
            "interval" = 500
        }
        "tick_every" = 86400
    }
    "locations" = $locations
    "subtype" = "http"
}

# Add assertions for response time, status code, and content-type
$testConfig.config.assertions += @{
    "operator" = "lessThan"
    "type" = "responseTime"
    "target" = 50000
}

$testConfig.config.assertions += @{
    "operator" = "is"
    "type" = "statusCode"
    "target" = 200
}

$testConfig.config.assertions += @{
    "operator" = "is"
    "property" = "content-type"
    "type" = "header"
    "target" = "application/json; charset=utf-8"
}

# Add JSON path assertions for dependency health checks
$dependencyChecks = $jsonObj.DependencyHealthChecks.PSObject.Properties.Name
foreach ($dependency in $dependencyChecks) {
    $testConfig.config.assertions += @{
        "type" = "body"
        "operator" = "validatesJSONPath"
        "target" = @{
            "jsonPath" = "$.DependencyHealthChecks.$dependency.Status"
            "operator" = "contains"
            "targetValue" = "Healthy"
        }
    }
}

# Add JSON path assertion for OverallStatus
$testConfig.config.assertions += @{
    "type" = "body"
    "operator" = "validatesJSONPath"
    "target" = @{
        "jsonPath" = "$.OverallStatus"
        "operator" = "contains"
        "targetValue" = "Healthy"
    }
}

# Display the test configuration
$testConfig | ConvertTo-Json -Depth 5
